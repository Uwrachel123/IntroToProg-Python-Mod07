# Title: Exception Handling and Pickeling
**Dev:** ^Rachel M Woo*          
**Date:**  *May 25, 2021*    
* Foundation of Programming, Python*     
* Assignment 07 *     

## Introduction
In this module I learned how to create scripts using custom functions, files, and structured error handling. 
I also learned how to add image for GitHub web pages. I am required to Research the web for example of 
how to use exception handling and Pickling features in Python and share the notes and the URL. 
Research Exception Handling in Python Per professor’s lecture and video, there are many way to write code how 
to handling error using exception. One importance guide per Professor Root is that If the basic exception 
“except exception as e:” is at the beginning, it will never catch the specific others exception (refer to Figure 1). 

Figure 1: Basic exception should be the last exception 

To prevent program error cause by human interaction, we can trap these errors by a try-except block of code. Here are few topics related to this topic:

##How to handle a single exception in Python? 
Here is a link to learn more about this topic by John Paul Mueller. I tried running the code to handle single exception with no error output (Figure 2) and with error outputs (Figure 3). 

Figure 2: code for error handling with single exception

Figure 3: two difference outputs with single exception

##How do I catch Exception in Python?
Here is a link to learn more about this topic/how to. 

An exception is an error that happens during execution of a program. When that error occurs, Python generate an exception that can be handled, 
which avoids your program to crash. Exceptions are convenient in many ways for handling errors and special conditions in a program. When you think 
that you have a code which can produce an error then you can use exception handling. Raising an exception breaks current code execution and returns 
the exception back until it is handled. Below table 1 provide common exception errors in python:

Type of exception errors	    |  Description of exception errors
IOError	                      |  If the file cannot be opened.
ImportError	                  |  If python cannot find the module
ValueError	                  |  Raised when a built-in operation or function receives an argument that has the right type but an inappropriate value
KeyboardInterrupt	            |  Raised when the user hits the interrupt key (normally Control-C or Delete)
EOFError	                    |  Raised when one of the built-in functions (input() or raw_input()) hits an end-of-file condition (EOF) without reading any data

In Figure 2 and 3, the code use “ValueError” to handle error using single exception. 

##How to handle specific exceptions in Python with try-except-else?
This link provides many example of how to handle specific exception. The code I use handle with try-except-else. 
Run the script in BOTH PyCharm (Figure 4-1 through Figure 4-3)and an OS command/shell window(Figure 5-1 and Figure 5-2).

Figure 4-1: Handling exception with try-except-else in PyCharm

Figure 4-2: catch no error with exception output in PyCharm

Figure 4-3: catch error with exception output in PyCharm
Figure 5-1: Handling exception with try-except-else in Command Window 
Figure 5-2: Output in Command Window

##What is meant by raising an exception in Python?
When a Python script encounters a situation that it cannot handle, it raise an exception. An exception is a Python object that represents an error. 
When a Python script raises an exception, it must either handle the exception immediately otherwise it terminates and quits. Here is a link to learn more on this topic. Run the script in BOTH PyCharm (Figure 6-1) and an OS command/shell window (Figure 6-2)

Figure 6-1: Raising exception in PyCharm
Figure 6-2: Raising exception in Command Window

##Research Pickling in Python
Pickling in Python means the process of serializing a Python object into a byte stream. The pickle module is responsible for the serialization and deserialization 
of Python objects. What does that mean? well, this is what I am going to answer in this article, so let’s get started. Here is a link to find more information on this topic. 

Figure 7-1: pickling code in PyCharm
Figure 7-2: Picking output in PyCharm
Create an advanced GitHub- Webpage 

###Formatting the Page: I use the "Preview" tab to see what my new markdown file looks like each time I modify the text (Figure 18). 
The look changes based on what markdown commands I use. While there are lots of commands available, let's focus on the ones you need for the assignment.

###Creating Text Headers: "#" symbol, indicates a header. "##" symbol, indicate topic. "###" symbol, indicate sub-topic.

###Formatting Text: You can make text bold using two Astrid "**" symbols or italic using a single Astrid.

##Summary
Using the textbook, the Module 07 documentation and videos provided by the professor, and the supplemental websites and video,
I was able to create the python code using PyCharm and run the script in PyCharm and Command window. I learned how to create a code to handling error. 
Additionally I learned how to create advance GitHub’s web and utilized it to share my script and learn from my classmate’s script. 
The program demonstrates my knowledge of how to utilized PyCharm and run script in command window to run Python script. 




